***** Kubernetes Services demo - commands ***** 
**** clusterIP service - demo ****
docker ps -a 
docker start 2738f1d4ccb2
minukube start
minikube update-context
minukube status
kubectl apply -f deployment.yml
kubectl describe deployment.apps/nginx-server
kubectl get pods -o wide
kubectl get pods -o wide --show-labels
kubectl apply -f clusterIp-service.yml   ## create service
kubectl describe service/nginx-service
curl nginx-service:8080   ## outside of the K8s network is not allowed!
kubectl apply -f pod-svc-test.yml   ## create temperory pod
kubectl exec pod-svc-test -- curl nginx-service:8080  ## now access to nginx is successful - way to create clusterIP kind of service
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   615  100   615    0     0     55      0  0:00:11  0:00:11 --:--:--  600k
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1> ....etc

**** NodePort service - demo ****  ## will be able to access outside the K8s network
kubectl apply -f nodeport-service.yml
kubectl describe service/nginx-service-nodeport
minikube ip
kubectl exec pod-svc-test -- curl 192.168.49.2:30099  ## now access to nginx is successful - way to create nodeport kind of service
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   615  100   615    0     0   153k      0 --:--:-- --:--:-- --:--:--  200k
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title> etc......

**** Discover services with DNS - demo ****  ## will be able to access outside the K8s network
kubectl get services -o wide
NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE   SELECTOR
kubernetes               ClusterIP   10.96.0.1       <none>        443/TCP        19d   <none>
nginx-service            ClusterIP   10.97.162.14    <none>        8080/TCP       83m   app=frontend
nginx-service-nodeport   NodePort    10.97.171.69    <none>        80:30099/TCP   58m   app=frontend
kubectl get pods -o wide --show-labels
kubectl exec pod-svc-test -- curl nginx-service:8080
kubectl get namespaces --show-labels
kubectl create namespace service-namespace    ## first create a namespace
kubectl get namespaces --show-labels
kubectl apply -f dns-service-pod.yml   ## then create svc-test-dns pod
kubectl get pods -o wide --show-labels
kubectl get pods -o wide --show-labels -n service-namespace
kubectl exec pod-svc-test -- curl nginx-service:8080
kubectl exec -n service-namespace svc-test-dns -- curl nginx-service:8080   
kubectl exec -n service-namespace svc-test-dns -- curl nginx-service.default.svc.cluster.local:8080  # we can access via service DNS
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   615  100   615    0     0  92203      0 --:--:-- --:--:-- --:--:--  150k
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>   ### :) 

**** Ingress controller - demo ****  

docker ps -a 
docker start 2738f1d4ccb2
minikube start
minikube status
kubectl apply -f nginx-deployment.yml
kubectl get deployment
kubectl describe deployment nginx-official-deployment
kubectl apply -f nginx-deployment-service.yml
kubectl apply -f magicalnginx-nginx-deployment.yml
kubectl apply -f magicalnginx-deployment-service.yml
kubectl get services
NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes               ClusterIP   10.96.0.1       <none>        443/TCP        22d
magical-nginx            NodePort    10.98.89.255    <none>        80:31304/TCP   2m18s
nginx-official-service   NodePort    10.97.142.239   <none>        80:31303/TCP   5m5s
minikube service magical-nginx --url
http://127.0.0.1:56237
curl http://127.0.0.1:56237
minikube service nginx-official-service --url
http://127.0.0.1:56381
curl http://127.0.0.1:56381   ## both were successful basically in order to receive info I have to run within docker
kubectl apply -f ingress-controller.yml
kubectl describe ingress nginx-rules
minikube ip
curl 192.168.49.2 -H 'Host: nginx-official.example.com'  # will be successful if you are using cloud such as AWS or GPC   
curl 192.168.49.2 -H 'Host: magical-nginx.example.com'

#### additional info below: you can use the kubectl port-forward command to forward traffic from a local port to a port on the service within your Kubernetes cluster. This allows you to access the service using localhost and the forwarded port ####
kubectl port-forward service/nginx-official-service 8080:80
kubectl port-forward service/nginx-official-service 8080:80 & curl -H 'Host: magical-nginx.example.com' http://localhost:8080
